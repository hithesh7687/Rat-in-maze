// C++ program to solve Rat in a Maze problem using
// backtracking
#include &lt;stdio.h&gt;
#include &lt;stdbool.h&gt;
// Maze size
#define N 4

bool solveMazeUtil(int maze[N][N], int x, int y,int
sol[N][N]);

// A utility function to print solution matrix
sol[N][N]
void printSolution(int sol[N][N])
{
for (int i = 0; i &lt; N; i++) {
for (int j = 0; j &lt; N; j++)
printf(&quot; %d &quot;, sol[i][j]);
printf(&quot;\n&quot;);
}
}

// A utility function to check if x, y is valid index
for
// N*N maze
bool isSafe(int maze[N][N], int x, int y)
{
// if (x, y outside maze) return false
if (x &gt;= 0 &amp;&amp; x &lt; N &amp;&amp; y &gt;= 0 &amp;&amp; y &lt; N &amp;&amp;
maze[x][y] == 1)
return true;
return false;
}

// This function solves the Maze problem using
Backtracking.
// It mainly uses solveMazeUtil() to solve the
problem. It
// returns false if no path is possible, otherwise
return
// true and prints the path in the form of 1s. Please
note
// that there may be more than one solutions, this
function
// prints one of the feasible solutions.
bool solveMaze(int maze[N][N])
{
int sol[N][N] = { { 0, 0, 0, 0 },
{ 0, 0, 0, 0 },
{ 0, 0, 0, 0 },
{ 0, 0, 0, 0 } };

if (solveMazeUtil(maze, 0, 0, sol) == false) {
printf(&quot;Solution doesn&#39;t exist&quot;);
return false;
}
printSolution(sol);
return true;
}

// A recursive utility function to solve Maze problem
bool solveMazeUtil(int maze[N][N], int x, int y, int
sol[N][N])
{
// if (x, y is goal) return true
if (x == N - 1 &amp;&amp; y == N - 1 &amp;&amp; maze[x][y] == 1)
{

sol[x][y] = 1;
return true;
}
// Check if maze[x][y] is valid
if (isSafe(maze, x, y) == true) {
// Check if the current block is already part

of

// solution path.
if (sol[x][y] == 1)
return false;
// mark x, y as part of solution path
sol[x][y] = 1;
/* Move forward in x direction */
if (solveMazeUtil(maze, x + 1, y, sol) ==

true)

return true;
// If moving in x direction doesn&#39;t give

solution

// then Move down in y direction

if (solveMazeUtil(maze, x, y + 1, sol) ==

true)

return true;
// If none of the above movements work then
// BACKTRACK: unmark x, y as part of solution

path

sol[x][y] = 0;
return false;
}
return false;
}

// driver program to test above function
int main()
{
int maze[N][N] = { { 1, 0, 0, 0 },
{ 1, 1, 0, 1 },
{ 0, 1, 0, 0 },
{ 1, 1, 1, 1 } };
printf(&quot;\n\nOUTPUT/SOLUTION PATH\n\n&quot;);
solveMaze(maze);
printf(&quot;\n\nThe 1 values show the path for
rat\n\n&quot;);
return 0;
}
